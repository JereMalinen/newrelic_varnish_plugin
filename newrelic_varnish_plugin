#! /usr/bin/env ruby

#
# Copyright 2012 Varnish Software AS
#
# Written by Tollef Fog Heen <tfheen@varnish-software.com>
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS''
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
# USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

require 'rubygems'
require 'optparse'
require "bundler/setup"
require 'rexml/document'
require "newrelic_plugin"

module VarnishAgent
  @options = OpenStruct.new
  @options.config_file = "config/newrelic_plugin.yml"
  @options.pid_file = "newrelic_plugin.pid"

  def VarnishAgent.parse_args(args)
    opt_parser = OptionParser.new do |opts|
      opts.banner = "Example usage: " \
                    "./newrelic_varnish_plugin -c /etc/newrelic/newrelic_varnish.yml -p /var/run/newrelic_varnish.pid" \
                    "\n\n" \
                    "Usage options:\n"

      opts.on("-c CONFIG_FILE",
              "--config=CONFIG_FILE",
              "Description: Config file, this must be readable by the user",
              "Example: /etc/newrelic/newrelic_varnish_plugin.yml",
              "Default: config/newrelic_plugin.yml\n\n") do |config|
        @options.config_file = config
      end

      opts.on("-p PIDFILE",
              "--pidfile=PIDFILE",
              "Description: Pid file, this must be writable by the user",
              "Example: /var/run/newrelic_varnish_plugin.pid",
              "Default: newrelic_plugin.pid\n\n") do |pidfile|
        @options.pid_file = pidfile
      end

      opts.on("-h", "--help", "Prints this help") do
        puts opts
        exit
      end
    end

    begin
      opt_parser.parse(args)
    rescue OptionParser::MissingArgument
      puts "Error: You must provide a value with this argument\n\n"
      opt_parser.parse("-h")
      exit
    end
    return @options
  end

  def VarnishAgent.write_pid_file()
    file_path = @options.pid_file
    pid = Process.pid

    begin
      pid_file = File.open(file_path, 'w')
      pid_file.write(pid)
      pid_file.write("\n")
      pid_file.close()
    rescue
      unless File.writable?(file_path)
        puts "Error: Could not write to pid file!\n"
      end
    end
  end

  def VarnishAgent.clear_pid_file()
    file_path = @options.pid_file
    if File.file?(file_path) && File.writable?(file_path)
      File.delete(file_path)
    end
  end

  def VarnishAgent.groups()
    return {
      'Backend Traffic' => {
        'metrics' => %w(backend_busy backend_conn backend_fail backend_recycle backend_req backend_retry backend_reuse backend_toolate backend_unhealthy)
      },
      'Cache Utilization' => {
        'metrics' => %w(client_req cache_hit cache_hitpass cache_miss)
      },
      'Compression' => {
        'metrics' => %w(n_gunzip n_gzip)
      },
      'Connections' => {
        'metrics' => %w(accept_fail client_conn client_drop client_drop_late client_req)
      },
      'DNS Director' => {
        'metrics' => %w(dir_dns_cache_full dir_dns_failed dir_dns_hit dir_dns_lookups)
      },
      'Hit Rates' => {
        # Provide calculated values
        'metrics' => %w(cache_missrate cache_hitrate cache_passrate)
      },
      'Network' => {
        'metrics' => %w(s_bodybytes s_fetch s_hdrbytes s_pass s_pipe s_req s_sess)
      },
      'Objects' => {
        'metrics' => %w(n_expired n_lru_nuked n_object n_objectcore n_objecthead n_objsendfile n_objwrite)
      },
      'Response Codes' => {
        'metrics' => %w(fetch_1xx fetch_204 fetch_304)
      },
      'Response Details' => {
        'metrics' => %w(fetch_chunked fetch_close fetch_eof fetch_head fetch_length fetch_oldhttp fetch_zero)
      },
      'Response Misbehave' => {
        'metrics' => %w(fetch_bad fetch_failed)
      },
      'Sessions' => {
        'metrics' => %w(sess_closed sess_linger sess_pipe_overflow sess_pipeline sess_readahead n_sess n_sess_mem)
      },
      'Storage' => {
        'metrics' => %w(sms_balloc sms_bfree sms_nbytes sms_nobj sms_nreq),
        'regex_metrics' => [ /^(SM[AF]\.[^.]+)\.[cg]_(\w+)/ ]
      },
      'Workers' => {
        'metrics' => %w(n_wrk n_wrk_create n_wrk_drop n_wrk_failed n_wrk_lqueue n_wrk_max n_wrk_queued)
      },
      # The following metrics are collected for diagnostics and debugging
      # They could safely be removed to save down on data transfer / storage
      'Diagnostic' => {
        'metrics' => %w(esi_errors esi_warnings losthdr n_backend n_ban n_ban_add n_ban_dups n_ban_gone n_ban_obj_test n_ban_re_test n_ban_retire n_lru_moved n_objoverflow n_vampireobject n_vcl n_vcl_avail n_vcl_discard sess_herd shm_cont shm_cycles shm_flushes shm_records shm_writes)
      },
      'Debug' => {
        'metrics' => %w(hcb_insert hcb_lock hcb_nolock n_waitinglist)
      },
    }
  end

  def VarnishAgent.varnishstat(vname = nil)
    cmd = [ "varnishstat", "-1", "-x" ]
    if not vname.nil?
      cmd.push("-n", vname.to_s)
    end
    r = ""
    IO::popen(cmd.join(' '), mode="r") do |io|
      r += io.read()
    end
    doc = REXML::Document.new(r)
    r = {}
    doc.elements.each('varnishstat/stat') do |i|
        name, others = i.elements.partition{|e| e.name == 'name'}
        r[name.first.text] = Hash[others.map{|e| [e.name, e.text]}]
    end
    return r
  end

  class Agent < NewRelic::Plugin::Agent::Base
    agent_guid "in.binarypa.newrelic-varnish-stat"
    agent_version '0.0.1'
    agent_human_labels("Varnish") { "#{@name||"varnish"}[#{@vname||"default"}]"}
    agent_config_options :name, :vname

#    metric_human_label { "Varnish[#{agent.instance_label}]: #{config[:description]}" }

    def unit(name)
      case name.to_s
        when /^client_(conn|drop)/
        "connections"
        when /^client_(req|hit|miss)/
        "requests"
        when /^cache_(hit|miss)/
        "requests"
        when /^backend_/
        "connections"
        when /^fetch_/
        "fetch"
        when /^n_(obj|expired|lru)/
        "objects"
        when /^n_wrk/
        "threads"
        when /^n_backend/
        "backends"
        when /^n_/
        "structs"
        when /^s_sess/
        "sessions"
        when /^s_(req|pipe|pass|fetch)/
        "requests"
        when /(bytes|balloc)$/
        "bytes"
        when /(bfree|nbytes)$/
        "bytes"
        when /g_space$/
        "bytes"
        when /^sess/
        "sessions"
        when /^losthdr/
        "requests"
        when /^esi_errors/
        "errors"
        when /^esi_warnings/
        "warnings"
        when /^accept_fail/
        "accepts"
        when /c_fail$/
        "allocations"
        else
        "unknown"
        #raise "Unknown unit: #{name}"
        end
    end

    def poll_cycle
      stats = VarnishAgent.varnishstat(@vname)
      VarnishAgent.groups.each do |gname, group|
        group["metrics"].each do |metric|
          stat = stats[metric]
          if stat.nil?
            next
          end
          report(metric, "#{gname}/#{stat["description"]}", stat)
        end

        if group.include?("regex_metrics")
          group["regex_metrics"].each do |regex|
            stats.each do |sname, stat|
              if regex.match(sname)
                report(sname, "#{gname}/#{$1} #{stat["description"]}", stat)
              end
            end
          end
        end
      end
    rescue => e
      $stderr.puts "#{e}: #{e.backtrace.join("\n  ")}"
    end

    def report(name, description, stat)
      if stat["flag"] == "a"
        report_counter_metric description, unit(name) + "/sec", stat["value"].to_i
      else
        report_metric description, unit(name), stat["value"].to_i
      end
    end

    def report_counter_metric(metric, type, value)
      @processors ||= {}

      if @processors[metric].nil?
        @processors[metric] = NewRelic::Processor::EpochCounter.new
      end

      report_metric metric, type, @processors[metric].process(value)
    end
  end

  options = VarnishAgent.parse_args(ARGV)
  NewRelic::Plugin::Config.config_file = options.config_file
  NewRelic::Plugin::Setup.install_agent :varnish,VarnishAgent
  VarnishAgent.write_pid_file()

  #
  # Launch the agent (never returns)
  #
  NewRelic::Plugin::Run.setup_and_run

  #
  # If process are being shut down gracefully, clear pid file
  #
  VarnishAgent.clear_pid_file()
end
